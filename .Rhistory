data <- read.table("data.csv", header = TRUE)
View(data)
View(data)
mean(data$val.measure)
mean(data$val.measure)
mean(data)
data <- read.table("data.csv", header = TRUE)
mean(data)
data <- read.table("data.csv", header = TRUE)
mean(data$val.measure)
data <- read.csv("data.csv", header = TRUE)
mean(data$val.measure)
mean(data$measure)
sd(data$measure)
View(data)
knitr::opts_chunk$set(echo = TRUE)
head(light)
light <- read.table("SGTADATASETS/light.dat", header = TRUE)
View(light)
head(light)
t.test(light$Brand1, light$Brand2)
t.test(light$Brand1, light$Brand2, var.equal = FALSE)
t.test(light$Brand1, light$Brand2, var.equal = TRUE)
t.test(light$Brand1, light$Brand2, var.equal = FALSE)
t.test(light$Brand1, light$Brand2)
qqline(light$Brand2)}
qqline(light$Brand1)}
{qqnorm(light$Brand1)
qqline(light$Brand1)}
{qqnorm(light$Brand2)
qqline(light$Brand2)}
par(mfrow = c(1, 2))
{qqnorm(light$Brand1)
qqline(light$Brand1)}
{qqnorm(light$Brand2)
qqline(light$Brand2)}
#Check whether variance is equal
c(sd(light$Brand1, light$Brand2, var.equal = TRUE))
#Check whether variance is equal
c(sd(light$Brand1, light$Brand2)
#Check whether variance is equal
c(sd(light$Brand1, sd(light$Brand2))
#Check whether variance is equal
c(sd(light$Brand1), sd(light$Brand2))
boxplot(light)
{qqnorm(light$Brand2)
qqline(light$Brand2)}
{qqnorm(light$Brand1)
qqline(light$Brand1)}
par(mfrow = c(1, 2))
{qqnorm(light$Brand1)
qqline(light$Brand1)}
{qqnorm(light$Brand2)
qqline(light$Brand2)}
t.test(light$Brand1, light$Brand2, var.equal = TRUE)
farm <- read.table("SGTADATASETS/farm.dat", header = TRUE)
difference = farm$yield[farm$plot == "sprayed"] - farm$yield[farm$plot == "unsprayed"]
#Check normality
{qqnorm(difference) qqline(difference)}
qqline(difference)}
{qqnorm(difference)
qqline(difference)}
t.test(yield - plot, paired= TRUE, data = farm, alternative = g)
t.test(yield - plot, paired= TRUE, data = farm, alternative = g)
boxplot(difference)
t.test(yield ~ plot, paired = TRUE, data = farm, alternative = g)
t.test(yield ~ plot, paired = TRUE, data = farm, alternative = 'g')
View(farm)
t.test(difference, alternative = 'g')
t.test(difference, alternative = 'g')
t.test(yield ~ plot, paired = TRUE, data = farm, alternative = 'g')
t.test(difference, alternative = 'g')
t.test(difference)
t.test(difference, alternative = 'g')
fertile <- read.table("SGTADATASETS/fertile.dat", header = TRUE)
par(mfrow = c(1,2))
{qqnorm(fertlie$fertile)
qqline(fertlie$fertile)}
par(mfrow = c(1,2))
{qqnorm(fertile$fertile)
qqline(fertlie$fertile)}
par(mfrow = c(1,2))
{qqnorm(fertile$fertile)
qqline(fertile$fertile)}
{qqnorm(fertile$nonfertile)
qqline(fertile$nonfertile)}
c(sd(fertile$fertile), sd(fertile$nonfertile))
boxplot(fertile)
t.test(fertile$fertile, fertile$nonfertile, ver.equal = FALSE)
blood <- read.table("blood.txt")
knitr::opts_chunk$set(echo = TRUE)
# Part 1
## Question 1
In a paper entitled “The origin of Precambrian Iron Formation”, Lindhurst reported on the total Fe content
iron <- read.table("SGTADATASETS/iron.txt", header = TRUE)
View(iron)
iron.aov = aov(content ~ formation, data = iron)
##First check for variances
boxplot(content ~ formation, data = iron)
#Check for normality of residuals
qqnorm(iron.aov$residuals)
summary(iron.aov)
barlett.test(content ~ formation, data = iron)
bartlett.test(content ~ formation, data = iron)
ns = with(iron, tapply(iron$content, iron$formation, length))
ns
sds = with(iron, tapply(iron$content, iron$formation, sd))
sd
sds
#Check for normality of residuals
qqnorm(iron.aov$residuals)
qqnorm(iron.aov$residuals)
qqline(iron.aov$residuals)
#Check for normality of residuals
par(mfrow = c(1,2))
par(mfrow = c(1,2))
qqnorm(iron.aov$residuals)
qqline(iron.aov$residuals)
par(mfrow = c(1,2))
{qqnorm(iron.aov$residuals)
qqline(iron.aov$residuals)}
ns = with(iron, tapply(iron$content, iron$formation, length))
means = with (iron, tapply(iron$content, iron$formation, mean))
sds = with (iron, tapply(iron$content, iron$formation, sd))
iron_summary = data.frame(n= ns, mean = means, sd = sds)
sd_max(iron_summary$sd)/min(iron_summary$sd)<2
ns = with(iron, tapply(iron$content, iron$formation, length))
means = with (iron, tapply(iron$content, iron$formation, mean))
sds = with (iron, tapply(iron$content, iron$formation, sd))
iron_summary = data.frame(n= ns, mean = means, sd = sds)
max(iron_summary$sd)/min(iron_summary$sd)<2
plot(iron.aov)
summary(iron.aov)
iron <- read.table("SGTADATASETS/iron.txt", header = TRUE)
iron.aov = aov(content ~ formation, data = iron)
#First check for variances, visualization or rule of thumb or f-test/barlett's test
boxplot(content ~ formation, data = iron)
bartlett.test(content ~ formation, data = iron)
ns = with(iron, tapply(iron$content, iron$formation, length))
means = with (iron, tapply(iron$content, iron$formation, mean))
sds = with (iron, tapply(iron$content, iron$formation, sd))
iron_summary = data.frame(n= ns, mean = means, sd = sds)
max(iron_summary$sd)/min(iron_summary$sd)<2
#Check for normality of residuals
par(mfrow = c(1,2))
{qqnorm(iron.aov$residuals)
qqline(iron.aov$residuals)}
summary(iron.aov)
temp <- read.csv('week4-quiz-data.csv')
View(temp)
summary(temp.aov)
temp.aov = aov(temp)
temp.aov = aov(data = temp, Y ~ Treatment)
summary(temp.aov)
temp <- read.csv('week4-quiz-data(1).csv')
temp.aov = aov(data = temp, Y ~ Treatment)
summary(temp.aov)
temp <- read.csv('week4-quiz-data(1).csv')
temp.aov = aov(data = temp, Y ~ Treatment)
summary(temp.aov)
temp <- read.csv('week4-quiz-data.csv')
View(temp)
temp.aov = aov(data = temp, Y ~ Treatment)
summary(temp.aov)
str(axial)
axial = read.table('SGTADATASETS/arial.txt', header = TRUE)
axial = read.table('SGTADATASETS/arial.txt', header = TRUE)
axial = read.table('SGTADATASETS/axial.txt', header = TRUE)
str(axial)
head(axial)
axial.aov = aov(asi ~ treatment, data = axial)
#Check assumptions
pat(mfrow = c(1,2))
#Check assumptions
par(mfrow = c(1,2))
bartlett.test(asi ~ treatment, data = axial)
sd_values <- tapply(axial$asi, axial$treatment, sd)
sd_values
str(axial)
qqline(axial.aov$residuals)}
par(mfrow = c(1,2))
{qqnorm(axial.aov$residuals)
qqline(axial.aov$residuals)}
sd_values <- tapply(asi ~ treatment, data = axial, sd)
sd_values <- tapply(axial$asi, axial$treatment, sd)
max(sd_values) / min(sd_values)
bartlett.test(asi ~ treatment, data = axial)
summary(axial.aov)
TukeyHSD(axial.aov)
week7 = read.csv('SGTADATASETS/week7.csv', headers = TRUE)
week7 <- read.csv('SGTADATASETS/week7.csv', header = TRUE)
View(week7)
week7$BMI = week7$Weight/(week7$Height / 100)^2
week7$BMI
week7$BMI = round(week7$BMI, 2)
week7$BMI
week7$Gender = new[match(week7$Gender, old)]
old = c("M", "F")
new = c("Male", "Female")
week7$Gender = new[match(week7$Gender, old)]
week7$Gender
mean(week7$Height)
which(week7$Name == 'Rosalie')
week7[which(week7$Name == 'Rosalie'), 1]
week7[which(week7$Name == 'Rosalie'), 2]
week7[which(week7$Name == 'Rosalie'), 3]
week7[which(week7$Name == 'Rosalie'), 8]
week7[which(week7$Name == 'Rosalie'), 9]
subset(week7, name %in% c('Rosalie', 'Aimen'))
subset(week7, Name %in% c('Rosalie', 'Aimen'))
install.packages('tinytex')
knitr::opts_chunk$set(echo = TRUE)
ecoli = read.table("SGTADTASETS/ecoli.txt", header = TRUE)
ecoli = read.table("SGTADATASETS/ecoli.txt", header = TRUE)
str(ecoli)
abline(lm(HEC ~ HGMF, data = ecoli))}
ecoli = read.table("SGTADATASETS/ecoli.txt", header = TRUE)
str(ecoli)
{plot(HEC ~ HGMF, data = ecoli)
abline(lm(HEC ~ HGMF, data = ecoli))}
summary(ecoli.lm)
ecoli.lm = lm(HEC ~ HGMF, data = ecoli)
summary(ecoli.lm)
par(mfrow = c(1,2))
plot(ecoli.lm)
plot(ecoli.lm, which = 1,2)
plot(ecoli.lm, which = (1,2))
?plot(ecoli.lm)
plot(ecoli.lm)
### d)
new = file:///C:/Users/alhas/Downloads/flow_meter.csv
### d)
new = read.csv(file:///C:/Users/alhas/Downloads/flow_meter.csv)
new = read.csv('file:///C:/Users/alhas/Downloads/flow_meter.csv')
new
regression_model <- lm(weight ~ pressure, data = new)
# Step 5: Extract the intercept and slope
intercept <- coef(regression_model)["(Intercept)"]
slope <- coef(regression_model)["pressure"]
# Step 6: Print the results
cat("Intercept:", round(intercept, 3), "\n")
cat("Slope:", round(slope, 3), "\n")
knitr::opts_chunk$set(echo = TRUE)
aisf = read.csv('SGTADATASETS/aisfemales.csv', header=TRUE)
plot(aisf)
d
d <- read.csv('mr_data.csv')
d
model <- lm(flow ~ weight + temperature + pressure, data=data)
model <- lm(flow ~ weight + temperature + pressure, data=data)
d
model <- lm(flow ~ weight + temperature + pressure, data=d)
model
turtle <- read.csv("SGTADATASETS/turtle.csv", header=TRUE)
turtles <- read.csv("SGTADATASETS/turtles.csv", header=TRUE)
turtles
lm?
?lm
?lm
data <- read.csv("poly_data.csv")
data
View(data)
fit <- lm(temp ~ poly(flow, degree = 4, raw = TRUE), data = data)
fit
fit
anova_table <- anova(fit)
p_values <- anova_table[, "Pr(>F)"]
p_values
p_values[2]
anova_table
fit <- lm(temp ~ flow + I(flow^2) + I(flow^3) + I(flow^4), data = data)
fit
anova_table <- anova(fit)
anova_table
head(data)
data
View(data)
data <- read.csv("categ_data.csv")
View(data)
model <- lm(dbp ~ chol_level * diet, data = data)
anova_result <- anova(model)
print(anova_result)
data = read.csv("categ_data.csv", header=TRUE)
data
View(data)
model <- lm(dbp ~ chol_level * diet, data = data)
anova_result <- anova(model)
summary(anova_result)
anova_result
table(data[,2:3])
categ_dat = read.csv("categ_data.csv", header=TRUE)
aov(dbp ~ as.factor(chol_level)*as.factor(diet), data=categ_dat)
table(data[,2:3])
categ_dat = read.csv("categ_data.csv", header=TRUE)
table(data[,2:3])
categANOVA=aov(dbp ~ as.factor(chol_level)*as.factor(diet), data=categ_dat)
summary(categANOVA))
summary(categANOVA)
knitr::opts_chunk$set(echo = TRUE)
turtles <- read.csv("turtles.csv", header = TRUE)
turtles <- read.csv("SGTADATASETS/turtles.csv", header = TRUE)
turtles
par(mfrow = c(1, 3))
plot(turtles)
turt.1 <- lm(eggs ~ carapace, data = turtles)
summary(turt.1)
par(mfrow = c(1, 3))
plot(turtles)
turt.1 <- lm(eggs ~ carapace, data = turtles)
summary(turt.1)
par(mfrow = c(1, 3))
plot(turtles)
turt.1 <- lm(eggs ~ carapace, data = turtles)
summary(turt.1)
abline(turt.1)
plot(turt.1, which = 1:2)
turtles <- read.csv("SGTADATASETS/turtles.csv", header = TRUE)
turt.1 <- lm(eggs ~ carapace, data = turtles)
summary(turt.1)
par(mfrow = c(1, 3))
plot(turtles)
abline(turt.1)
plot(turt.1, which = 1:2)
turt.2 <- lm(eggs ~ carapace + I(carapaceˆ2), data = turtles)
turt.3 <- lm(eggs ~ carapace + I(carapaceˆ2) + I(carapaceˆ3), data = turtles)
turt.2 <- lm(eggs ~ carapace + I(carapaceˆ2), data = turtles)
turtles <- read.csv("SGTADATASETS/turtles.csv", header = TRUE)
turt.1 <- lm(eggs ~ carapace, data = turtles)
turt.2 <- lm(eggs ~ carapace + I(carapaceˆ2), data = turtles)
turt.2 <- lm(eggs ~ carapace + I(carapace^2), data = turtles)
turt.3 <- lm(eggs ~ carapace + I(carapace^2) + I(carapace^3), data = turtles)
anova(turt.2)
anova(turt.3)
plot(turt.2, which = 1:2)
par(mfrow = c(1,2))
plot(turt.2, which = 1:2)
par(mfrow = c(1,2))
plot(turt.2, which = 1:2)
plot(turt.1, which = 1)
par(mfrow = c(1,2))
plot(turt.2, which = 1:2)
plot(turt.1, which = 1)
plot(turtles)
x <- seq(from = min(turtles$carapace), to = max(turtles$carapace), length = 32)
carapacedat <- data.frame(carapace = x)
eggshat <- predict(turt.2, newdata = carapacedat)
lines(x, eggshat)
sexdata <- read.table("SGTADATASETS/sexdiscrim.txt", header = TRUE)
sexdata$SEX <- factor(sexdata$SEX)
head(sexdata)
sexdata <- read.table("SGTADATASETS/sexdiscrim.txt", header = TRUE)
head(sexdata)
sexdata$SEX <- factor(sexdata$SEX)
head(sexdata)
mycols <- c("blue", "red")
mycols <- c("blue", "red")
str(sexdata$SEX)
pairs(sexdata[, -2], panel = panel.smooth,
col = mycols[unclass(sexdata$SEX)])
sex.1 <- lm(BSAL ~ AGE + EDUC + EXPER + SEX, data = sexdata)
summary(sex.1)
plot(sex.1, which = 1:2)
plot(resid(sex.1) ~ AGE + EDUC + EXPER, data = sexdata)
plot(sex.1, which = 1:2)
plot(resid(sex.1) ~ AGE + EDUC + EXPER, data = sexdata)
sexdata$lnbsal <- log(sexdata$BSAL)
sex.2 <- lm(lnbsal ~ AGE + EDUC + EXPER + SEX, data = sexdata)
summary(sex.2)
summary(sex.1)
plot(sex.2, which = 1:2)
plot(resid(sex.2) ~ AGE + EDUC + EXPER, data = sexdata
plot(resid(sex.2) ~ AGE + EDUC + EXPER, data = sexdata)
plot(resid(sex.2) ~ AGE + EDUC + EXPER, data = sexdata)
sex.4 <- update(sex.2, . ~ . - EXPER)
summary(sex.4)
sex.3 <- update(sex.1, . ~ . - EXPER)
summary(sex.3)
knitr::opts_chunk$set(echo = TRUE)
bone = read.table("SGTADATASETS/bone-growth.dat", header = TRUE)
head(bone)
table(bone[, 1:2])
table(bone[1:2])
,
table(bone[, 1:2])
table(bone[1:2])
,
table(bone[, 1:2])
table(bone[1:2])
table(bone[, 1:2])
table(bone)
table(bone[])
table(bone[1:3])
table(bone[1:2])
with(bone, interaction.plot(bone.dev, gender, growth, col = 1:2))
with(bone, interaction.plot(gender, bone.dev, growth, col = 1:3))
with(bone, interaction.plot(bone.dev, gender, growth, col = 1:2))
with(bone, interaction.plot(gender, bone.dev, growth, col = 1:3))
with(bone, interaction.plot(bone.dev, gender, growth, col = 1:2))
with(bone, interaction.plot(gender, bone.dev, growth, col = 1:3))
boxplot(growth ~ gender + bone.dev, data = bone)
bone.1 = lm(growth ~ gender, data = bone)
anova(bone.1)
bone.2 = lm(growth ~ gender + bone.dev, data = bone)
anova(bone.2)
bone.2rev = lm(growth ~ bone.dev + gender, data = bone)
anova(bone.2rev)
bone.int = lm(growth ~ gender * bone.dev, data = bone)
anova(bone.int)
bone.final = lm(growth ~ gender + bone.dev, data = bone)
bone.final
plot(bone.final, which = 1:2)
knitr::opts_chunk$set(echo = TRUE)
dens <- read.csv("SGTADATASETS/density.csv", header = TRUE)
dens
levels(dens)
dens
levels(dens$position)
levels(dens$temp)
rank(dens$temp)
head(dens)
interaction.plot(dens)
interaction.plot(position, temp, density, data = dens)
with(dens, interaction.plot(position, temp, density))
with(dens, interaction.plot(position, temp, density, col=1:3))
with(dens, interaction.plot(position, temp, density, col=3:5))
3
with(dens, interaction.plot(position, temp, density, col=1:3))
par(mfrow=c(1,2))
with(dens, interaction.plot(position, temp, density, col=1:3))
with(dens, interaction.plot(temp, position, density, col = 1:2, lwd = 2))
with(dens, interaction.plot(position, temp, density, col=1:3))
with(dens, interaction.plot(temp, position, density, col = 1:2, lwd = 2))
table(dens[, c("position", "temp")])
dens.int <- lm(density ~ factor(temp) * factor(position), data = dens)
anova(dens.int)
dens.main <- lm(density ~ factor(temp) + factor(position), data = dens)
anova(dens.main)
plot(dens.main, which=1:2)
nrow(dens)
nrow(dens$position)
nrow(dens)
TukeyHSD(aov(dens.main), "factor(temp)")
TukeyHSD(aov(dens.main), "factor(position)")
TukeyHSD(aov(dens.main), "factor(temp)")
cash <- read.table("SGTADATASETS/cash.dat", header = TRUE)
table(cash[, c("gender", "age")])
cash.1 <- lm(offer ~ age * gender, data = cash)
cash.2 <- lm(offer ~ gender * age, data = cash)
anova(cash.1)
anova(cash.2)
cash.3 <- lm(offer ~ age + gender, data = cash)
anova(cash.3)
cash.4 <- lm(offer ~ age, data = cash)
anova(cash.4)
plot(TukeyHSD(aov(cash.4), "age"))
model.tables(aov(cash.4), type = 'means')
`{r}
my.mean <- function(x) { # Name the function as my.mean # Define x as the input
output <- sum(x) / length(x) # Calculate the average
return(output) # Return the average as an output
}
my.mean(c(2,3))
my.mean(c(2,3))
return(output) # Return the average as an output
my.mean <- function(x) { # Name the function as my.mean # Define x as the input
output <- sum(x) / length(x) # Calculate the average
return(output) # Return the average as an output
}
my.mean <- function(x) { # Name the function as my.mean # Define x as the input
output <- sum(x) / length(x) # Calculate the average
return(output) # Return the average as an output
}
my.mean(c(2,3))
my.IQR <- function(x) {
q <- as.numeric(quantile(x))
output <- q[3]-q[1]
return(output)
}
my.IQR(c(1,2,3,4,5))
knitr::opts_chunk$set(echo = TRUE)
drink = read.csv("drinking.csv", stringsAsFactors = TRUE, header = TRUE)
drink = read.csv("SGTADASETS/drinking.csv", stringsAsFactors = TRUE, header = TRUE)
drink = read.csv("SGTADASETS/drinking.csv", stringsAsFactors = TRUE, header = TRUE)
drink = read.csv("SGTADATASETS/drinking.csv", stringsAsFactors = TRUE, header = TRUE)
drink = read.csv("SGTADATASETS/drinking.csv", stringsAsFactors = TRUE, header = TRUE)
par(mfrow = c(1, 3))
plot(club ~ age, data = drink, pch = 20)
mycols = c("blue", "red", "green")
plot(club ~ age, col = mycols[unclass(drink$nat)],
data = drink, pch = 20)
#legend("topright", title = "Nationality", legend = levels(drink$nat), col = mycols, pch = 20)
legend("topright", title = "Nationality", legend = unique(drink$nat),
col = mycols, pch = 20)
plot(club ~ age, col = mycols[unclass(drink$sex)],
data = drink, pch = 20)
#legend("topright", title = "Sex", legend = levels(drink$sex), col = mycols, pch = 20)
legend("topright", title = "Sex", legend = unique(drink$sex),
col = mycols, pch = 20)
club.1 = lm(club ~ age + nat + sex, data = drink)
plot(club.1, which = 1:2)
club.2 = lm(log2(club + 1) ~ age + nat + sex, data = drink)
plot(club.2, which = 1:2)
summary(club.2)
summary(club.2)
anova(lm(log2(club + 1) ~ age + sex + nat, data = drink))
club.3 = update(club.2, . ~ . - sex)
summary(club.3)
anova(lm(log2(club + 1) ~ age + nat, data = drink))
summary(club.3)
anova(lm(log2(club + 1) ~ age + nat, data = drink))
confint(club.3, "age")
TukeyHSD(aov(club.3), "nat")
